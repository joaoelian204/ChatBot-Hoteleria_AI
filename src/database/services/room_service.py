"""
Servicio especializado en informaci√≥n de habitaciones
"""
import re
from typing import Any, Dict, List

from database.repository import contenido_repository
from utils.logger import logger


def get_room_info_from_documents() -> str:
    """Obtiene informaci√≥n de habitaciones desde la base de datos"""
    try:
        habitaciones = contenido_repository.obtener_por_categoria('habitaciones')
        if not habitaciones:
            habitaciones = contenido_repository.buscar_contenido('habitaci√≥n')

        if not habitaciones:
            return """üè† **HABITACIONES**
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚ö†Ô∏è **Informaci√≥n de habitaciones no disponible**

Por favor contacta a la recepci√≥n para informaci√≥n actualizada sobre nuestras habitaciones."""

        response = "üè† **NUESTRAS HABITACIONES**\n"
        response += "‚ïê" * 40 + "\n\n"

        for i, habitacion in enumerate(habitaciones, 1):
            titulo = habitacion.get('titulo', f'Habitaci√≥n {i}')
            contenido = habitacion.get('contenido', '')
            precio = habitacion.get('precio', 0)

            response += f"üõèÔ∏è **{titulo}**\n"
            response += "‚îÄ" * (len(titulo) + 4) + "\n"

            # Mostrar precio si est√° disponible
            if precio:
                response += f"üí∞ **Precio:** ${precio:.0f} USD por noche\n\n"

            # Procesar contenido l√≠nea por l√≠nea
            lineas = contenido.split('\n')
            for linea in lineas:
                linea = linea.strip()
                if linea:
                    # Agregar iconos seg√∫n el contenido
                    if any(word in linea.lower() for word in ['precio', 'costo', '$']):
                        response += f"üí∞ {linea}\n"
                    elif any(word in linea.lower() for word in ['cama', 'bed', 'doble', 'king', 'queen']):
                        response += f"üõèÔ∏è {linea}\n"
                    elif any(word in linea.lower() for word in ['ba√±o', 'bathroom', 'ducha']):
                        response += f"üöø {linea}\n"
                    elif any(word in linea.lower() for word in ['vista', 'view', 'mar', 'jard√≠n']):
                        response += f"üåÖ {linea}\n"
                    elif any(word in linea.lower() for word in ['wifi', 'internet', 'tv', 'aire']):
                        response += f"üì∫ {linea}\n"
                    elif any(word in linea.lower() for word in ['metros', 'm2', 'tama√±o', 'espacio']):
                        response += f"üìê {linea}\n"
                    elif any(word in linea.lower() for word in ['hu√©sped', 'persona', 'ocupan']):
                        response += f"üë• {linea}\n"
                    else:
                        response += f"‚ú® {linea}\n"

            # Mostrar metadatos si existen
            metadatos = habitacion.get('metadatos', {})
            if metadatos:
                response += "\nüìä **Detalles adicionales:**\n"
                for key, value in metadatos.items():
                    if value:
                        response += f"‚Ä¢ **{key.title()}:** {value}\n"

            response += "\n" + "‚îÄ" * 40 + "\n\n"

        response += "‚ïê" * 40 + "\n"
        response += "üìû **¬øInteresado?** Contacta recepci√≥n para reservar"

        return response

    except Exception as e:
        logger.error(f"‚ùå Error obteniendo informaci√≥n de habitaciones desde BD: {e}")
        return """üè† **HABITACIONES**
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚ùå **Error temporal**

No pudimos obtener la informaci√≥n de habitaciones en este momento.
Por favor contacta directamente a recepci√≥n."""


def get_cheapest_room_info() -> str:
    """Obtiene informaci√≥n de la habitaci√≥n m√°s barata"""
    try:
        habitaciones = contenido_repository.obtener_por_categoria('habitaciones')
        if not habitaciones:
            habitaciones = contenido_repository.buscar_contenido('habitaci√≥n')

        if not habitaciones:
            return "üè† **HABITACIONES**\n\nInformaci√≥n de habitaciones no disponible."

        # Buscar la habitaci√≥n m√°s econ√≥mica usando el campo precio directamente
        precio_min = float('inf')
        habitacion_barata = None

        for habitacion in habitaciones:
            precio = habitacion.get('precio', 0)
            if precio and precio < precio_min:
                precio_min = precio
                habitacion_barata = habitacion

        # Si no hay precios directos, buscar en el contenido
        if not habitacion_barata:
            for habitacion in habitaciones:
                contenido = habitacion['contenido'].lower()
                precios = re.findall(r'\$\s*(\d+)', contenido)
                for precio_str in precios:
                    precio = float(precio_str)
                    if precio < precio_min:
                        precio_min = precio
                        habitacion_barata = habitacion

        if habitacion_barata:
            response = "üí∞ **HABITACI√ìN M√ÅS ECON√ìMICA**\n"
            response += "‚ïê" * 40 + "\n\n"
            response += f"üõèÔ∏è **{habitacion_barata['titulo']}**\n"
            response += "‚îÄ" * (len(habitacion_barata['titulo']) + 4) + "\n"
            response += f"üíµ **Precio:** ${precio_min:.0f} USD por noche\n\n"

            # Obtener metadatos
            metadatos = habitacion_barata.get('metadatos', {})
            if metadatos:
                response += "üìä **Caracter√≠sticas principales:**\n"
                for key, value in metadatos.items():
                    if value:
                        response += f"‚Ä¢ **{key.title()}:** {value}\n"
                response += "\n"

            # Procesar descripci√≥n
            contenido = habitacion_barata.get('contenido', '')
            if contenido:
                response += "üìù **Descripci√≥n:**\n"
                lineas = contenido.split('\n')
                for linea in lineas[:3]:  # Solo primeras 3 l√≠neas
                    linea = linea.strip()
                    if linea and '$' not in linea:  # Evitar duplicar precio
                        response += f"‚ú® {linea}\n"
                response += "\n"

            response += "‚ïê" * 40 + "\n"
            response += "üìû **Reserva ahora:** Contacta recepci√≥n para disponibilidad"

            return response
        else:
            return "üè† **HABITACIONES**\n\nNo se encontraron precios disponibles."

    except Exception as e:
        logger.error(f"‚ùå Error obteniendo habitaci√≥n m√°s barata: {e}")
        return "üè† Error obteniendo informaci√≥n de habitaciones baratas."


def get_most_expensive_room_info() -> str:
    """Obtiene informaci√≥n de la habitaci√≥n m√°s cara"""
    try:
        habitaciones = contenido_repository.obtener_por_categoria('habitaciones')
        if not habitaciones:
            habitaciones = contenido_repository.buscar_contenido('habitaci√≥n')

        if not habitaciones:
            return "üè† **HABITACIONES**\n\nInformaci√≥n de habitaciones no disponible."

        # Buscar la habitaci√≥n m√°s cara usando el campo precio directamente
        precio_max = 0
        habitacion_cara = None

        for habitacion in habitaciones:
            precio = habitacion.get('precio', 0)
            if precio and precio > precio_max:
                precio_max = precio
                habitacion_cara = habitacion

        # Si no hay precios directos, buscar en el contenido
        if not habitacion_cara:
            for habitacion in habitaciones:
                contenido = habitacion['contenido'].lower()
                precios = re.findall(r'\$\s*(\d+)', contenido)
                for precio_str in precios:
                    precio = float(precio_str)
                    if precio > precio_max:
                        precio_max = precio
                        habitacion_cara = habitacion

        if habitacion_cara:
            response = "üëë **HABITACI√ìN M√ÅS LUJOSA**\n"
            response += "‚ïê" * 40 + "\n\n"
            response += f"üè® **{habitacion_cara['titulo']}**\n"
            response += "‚îÄ" * (len(habitacion_cara['titulo']) + 4) + "\n"
            response += f"üíé **Precio:** ${precio_max:.0f} USD por noche\n\n"

            # Obtener metadatos
            metadatos = habitacion_cara.get('metadatos', {})
            if metadatos:
                response += "‚ú® **Caracter√≠sticas exclusivas:**\n"
                for key, value in metadatos.items():
                    if value:
                        response += f"‚Ä¢ **{key.title()}:** {value}\n"
                response += "\n"

            # Procesar descripci√≥n
            contenido = habitacion_cara.get('contenido', '')
            if contenido:
                response += "üìù **Descripci√≥n premium:**\n"
                lineas = contenido.split('\n')
                for linea in lineas[:4]:  # Primeras 4 l√≠neas para habitaci√≥n premium
                    linea = linea.strip()
                    if linea and '$' not in linea:  # Evitar duplicar precio
                        response += f"üåü {linea}\n"
                response += "\n"

            response += "‚ïê" * 40 + "\n"
            response += "üéâ **¬°Experiencia de lujo!** Contacta recepci√≥n para reservar"

            return response
        else:
            return "üè† **HABITACIONES**\n\nNo se encontraron precios disponibles."

    except Exception as e:
        logger.error(f"‚ùå Error obteniendo habitaci√≥n m√°s cara: {e}")
        return "üè† Error obteniendo informaci√≥n de habitaciones de lujo."


def get_rooms_with_prices() -> List[Dict[str, Any]]:
    """
    Obtiene todas las habitaciones con precios v√°lidos

    Returns:
        List[Dict]: Lista de habitaciones con precios
    """
    try:
        habitaciones = contenido_repository.obtener_por_categoria('habitaciones')
        if not habitaciones:
            habitaciones = contenido_repository.buscar_contenido('habitaci√≥n')

        rooms_with_prices = []

        for habitacion in habitaciones:
            precio = habitacion.get('precio', 0)

            # Si no hay precio directo, buscar en el contenido
            if not precio:
                contenido = habitacion.get('contenido', '')
                precios = re.findall(r'\$\s*(\d+)', contenido)
                if precios:
                    precio = float(precios[0])

            if precio and precio > 0:
                room_data = habitacion.copy()
                room_data['precio'] = precio
                rooms_with_prices.append(room_data)

        return rooms_with_prices

    except Exception as e:
        logger.error(f"‚ùå Error obteniendo habitaciones con precios: {e}")
        return []
